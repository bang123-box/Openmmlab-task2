{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.6\nNVCC: Cuda compilation tools, release 11.6, V11.6.112\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.13.1+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1+cu116\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '/HOME/scz0ash/run/mmdetection/balloon/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=12,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/HOME/scz0ash/run/mmdetection/balloon/train/train_ann.json',\n        img_prefix='/HOME/scz0ash/run/mmdetection/balloon/train/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/HOME/scz0ash/run/mmdetection/balloon/val/val_ann.json',\n        img_prefix='/HOME/scz0ash/run/mmdetection/balloon/val/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/HOME/scz0ash/run/mmdetection/balloon/val/val_ann.json',\n        img_prefix='data_root + val/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/HOME/scz0ash/run/mmdetection/pretrained.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = 'work/maks_rcnn_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1052806391, "exp_name": "mask_rcnn_r50_fpn_2x_coco.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 5e-05, "bbox_mAP": 0.0022, "bbox_mAP_50": 0.0136, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0009, "bbox_mAP_l": 0.0053, "bbox_mAP_copypaste": "0.0022 0.0136 0.0000 0.0000 0.0009 0.0053", "segm_mAP": 0.0049, "segm_mAP_50": 0.0432, "segm_mAP_75": 0.0, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.0108, "segm_mAP_copypaste": "0.0049 0.0432 0.0000 0.0000 0.0000 0.0108"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00011, "bbox_mAP": 0.0011, "bbox_mAP_50": 0.0052, "bbox_mAP_75": 0.0002, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0016, "bbox_mAP_l": 0.0012, "bbox_mAP_copypaste": "0.0011 0.0052 0.0002 0.0000 0.0016 0.0012", "segm_mAP": 0.001, "segm_mAP_50": 0.004, "segm_mAP_75": 0.0, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0012, "segm_mAP_l": 0.0012, "segm_mAP_copypaste": "0.0010 0.0040 0.0000 0.0000 0.0012 0.0012"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00017, "bbox_mAP": 0.0022, "bbox_mAP_50": 0.0079, "bbox_mAP_75": 0.0002, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0029, "bbox_mAP_l": 0.0024, "bbox_mAP_copypaste": "0.0022 0.0079 0.0002 0.0000 0.0029 0.0024", "segm_mAP": 0.0022, "segm_mAP_50": 0.0066, "segm_mAP_75": 0.001, "segm_mAP_s": 0.0009, "segm_mAP_m": 0.0029, "segm_mAP_l": 0.0069, "segm_mAP_copypaste": "0.0022 0.0066 0.0010 0.0009 0.0029 0.0069"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00023, "bbox_mAP": 0.0053, "bbox_mAP_50": 0.0202, "bbox_mAP_75": 0.0013, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.01, "bbox_mAP_l": 0.0054, "bbox_mAP_copypaste": "0.0053 0.0202 0.0013 0.0000 0.0100 0.0054", "segm_mAP": 0.0091, "segm_mAP_50": 0.0211, "segm_mAP_75": 0.0053, "segm_mAP_s": 0.001, "segm_mAP_m": 0.0104, "segm_mAP_l": 0.0122, "segm_mAP_copypaste": "0.0091 0.0211 0.0053 0.0010 0.0104 0.0122"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00029, "bbox_mAP": 0.0076, "bbox_mAP_50": 0.0231, "bbox_mAP_75": 0.0029, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0187, "bbox_mAP_l": 0.0075, "bbox_mAP_copypaste": "0.0076 0.0231 0.0029 0.0000 0.0187 0.0075", "segm_mAP": 0.0138, "segm_mAP_50": 0.0317, "segm_mAP_75": 0.0122, "segm_mAP_s": 0.0027, "segm_mAP_m": 0.0148, "segm_mAP_l": 0.0212, "segm_mAP_copypaste": "0.0138 0.0317 0.0122 0.0027 0.0148 0.0212"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00035, "bbox_mAP": 0.0156, "bbox_mAP_50": 0.0422, "bbox_mAP_75": 0.0068, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0271, "bbox_mAP_l": 0.0199, "bbox_mAP_copypaste": "0.0156 0.0422 0.0068 0.0000 0.0271 0.0199", "segm_mAP": 0.0231, "segm_mAP_50": 0.0546, "segm_mAP_75": 0.0148, "segm_mAP_s": 0.0037, "segm_mAP_m": 0.0243, "segm_mAP_l": 0.0694, "segm_mAP_copypaste": "0.0231 0.0546 0.0148 0.0037 0.0243 0.0694"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00041, "bbox_mAP": 0.0221, "bbox_mAP_50": 0.0662, "bbox_mAP_75": 0.01, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0304, "bbox_mAP_l": 0.0352, "bbox_mAP_copypaste": "0.0221 0.0662 0.0100 0.0000 0.0304 0.0352", "segm_mAP": 0.036, "segm_mAP_50": 0.0791, "segm_mAP_75": 0.0344, "segm_mAP_s": 0.0011, "segm_mAP_m": 0.028, "segm_mAP_l": 0.0996, "segm_mAP_copypaste": "0.0360 0.0791 0.0344 0.0011 0.0280 0.0996"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00047, "bbox_mAP": 0.0614, "bbox_mAP_50": 0.159, "bbox_mAP_75": 0.0341, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0632, "bbox_mAP_l": 0.0864, "bbox_mAP_copypaste": "0.0614 0.1590 0.0341 0.0000 0.0632 0.0864", "segm_mAP": 0.0954, "segm_mAP_50": 0.1777, "segm_mAP_75": 0.0854, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0492, "segm_mAP_l": 0.192, "segm_mAP_copypaste": "0.0954 0.1777 0.0854 0.0000 0.0492 0.1920"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00053, "bbox_mAP": 0.1551, "bbox_mAP_50": 0.3192, "bbox_mAP_75": 0.1153, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1164, "bbox_mAP_l": 0.183, "bbox_mAP_copypaste": "0.1551 0.3192 0.1153 0.0000 0.1164 0.1830", "segm_mAP": 0.2266, "segm_mAP_50": 0.3693, "segm_mAP_75": 0.2483, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1352, "segm_mAP_l": 0.2896, "segm_mAP_copypaste": "0.2266 0.3693 0.2483 0.0000 0.1352 0.2896"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00059, "bbox_mAP": 0.1929, "bbox_mAP_50": 0.3992, "bbox_mAP_75": 0.1191, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.2011, "bbox_mAP_l": 0.2249, "bbox_mAP_copypaste": "0.1929 0.3992 0.1191 0.0000 0.2011 0.2249", "segm_mAP": 0.2899, "segm_mAP_50": 0.4455, "segm_mAP_75": 0.3474, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1726, "segm_mAP_l": 0.3473, "segm_mAP_copypaste": "0.2899 0.4455 0.3474 0.0000 0.1726 0.3473"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00065, "bbox_mAP": 0.2492, "bbox_mAP_50": 0.4925, "bbox_mAP_75": 0.2084, "bbox_mAP_s": 0.0061, "bbox_mAP_m": 0.241, "bbox_mAP_l": 0.2883, "bbox_mAP_copypaste": "0.2492 0.4925 0.2084 0.0061 0.2410 0.2883", "segm_mAP": 0.3503, "segm_mAP_50": 0.5016, "segm_mAP_75": 0.4285, "segm_mAP_s": 0.0034, "segm_mAP_m": 0.2533, "segm_mAP_l": 0.41, "segm_mAP_copypaste": "0.3503 0.5016 0.4285 0.0034 0.2533 0.4100"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00071, "bbox_mAP": 0.2741, "bbox_mAP_50": 0.5216, "bbox_mAP_75": 0.251, "bbox_mAP_s": 0.0089, "bbox_mAP_m": 0.2372, "bbox_mAP_l": 0.312, "bbox_mAP_copypaste": "0.2741 0.5216 0.2510 0.0089 0.2372 0.3120", "segm_mAP": 0.3936, "segm_mAP_50": 0.5466, "segm_mAP_75": 0.467, "segm_mAP_s": 0.0034, "segm_mAP_m": 0.3035, "segm_mAP_l": 0.4514, "segm_mAP_copypaste": "0.3936 0.5466 0.4670 0.0034 0.3035 0.4514"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.3226, "bbox_mAP_50": 0.5714, "bbox_mAP_75": 0.3335, "bbox_mAP_s": 0.0184, "bbox_mAP_m": 0.2431, "bbox_mAP_l": 0.3808, "bbox_mAP_copypaste": "0.3226 0.5714 0.3335 0.0184 0.2431 0.3808", "segm_mAP": 0.4277, "segm_mAP_50": 0.5699, "segm_mAP_75": 0.503, "segm_mAP_s": 0.0054, "segm_mAP_m": 0.3278, "segm_mAP_l": 0.4945, "segm_mAP_copypaste": "0.4277 0.5699 0.5030 0.0054 0.3278 0.4945"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.00083, "bbox_mAP": 0.3557, "bbox_mAP_50": 0.5969, "bbox_mAP_75": 0.3576, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.2769, "bbox_mAP_l": 0.4222, "bbox_mAP_copypaste": "0.3557 0.5969 0.3576 0.0505 0.2769 0.4222", "segm_mAP": 0.4717, "segm_mAP_50": 0.5896, "segm_mAP_75": 0.5585, "segm_mAP_s": 0.0076, "segm_mAP_m": 0.3587, "segm_mAP_l": 0.5383, "segm_mAP_copypaste": "0.4717 0.5896 0.5585 0.0076 0.3587 0.5383"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.00089, "bbox_mAP": 0.3955, "bbox_mAP_50": 0.641, "bbox_mAP_75": 0.391, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.3006, "bbox_mAP_l": 0.4649, "bbox_mAP_copypaste": "0.3955 0.6410 0.3910 0.0505 0.3006 0.4649", "segm_mAP": 0.5208, "segm_mAP_50": 0.6326, "segm_mAP_75": 0.6107, "segm_mAP_s": 0.018, "segm_mAP_m": 0.3891, "segm_mAP_l": 0.5926, "segm_mAP_copypaste": "0.5208 0.6326 0.6107 0.0180 0.3891 0.5926"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.00095, "bbox_mAP": 0.4303, "bbox_mAP_50": 0.6828, "bbox_mAP_75": 0.4767, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.3054, "bbox_mAP_l": 0.5098, "bbox_mAP_copypaste": "0.4303 0.6828 0.4767 0.2020 0.3054 0.5098", "segm_mAP": 0.5828, "segm_mAP_50": 0.6762, "segm_mAP_75": 0.6436, "segm_mAP_s": 0.0473, "segm_mAP_m": 0.4386, "segm_mAP_l": 0.6652, "segm_mAP_copypaste": "0.5828 0.6762 0.6436 0.0473 0.4386 0.6652"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.4122, "bbox_mAP_50": 0.675, "bbox_mAP_75": 0.4635, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.3048, "bbox_mAP_l": 0.4843, "bbox_mAP_copypaste": "0.4122 0.6750 0.4635 0.2020 0.3048 0.4843", "segm_mAP": 0.5724, "segm_mAP_50": 0.6694, "segm_mAP_75": 0.6368, "segm_mAP_s": 0.047, "segm_mAP_m": 0.4363, "segm_mAP_l": 0.6521, "segm_mAP_copypaste": "0.5724 0.6694 0.6368 0.0470 0.4363 0.6521"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.00011, "bbox_mAP": 0.4244, "bbox_mAP_50": 0.6825, "bbox_mAP_75": 0.4693, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.3068, "bbox_mAP_l": 0.4989, "bbox_mAP_copypaste": "0.4244 0.6825 0.4693 0.2020 0.3068 0.4989", "segm_mAP": 0.5823, "segm_mAP_50": 0.6779, "segm_mAP_75": 0.644, "segm_mAP_s": 0.047, "segm_mAP_m": 0.4394, "segm_mAP_l": 0.6642, "segm_mAP_copypaste": "0.5823 0.6779 0.6440 0.0470 0.4394 0.6642"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.00011, "bbox_mAP": 0.429, "bbox_mAP_50": 0.686, "bbox_mAP_75": 0.4709, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.3081, "bbox_mAP_l": 0.5044, "bbox_mAP_copypaste": "0.4290 0.6860 0.4709 0.2020 0.3081 0.5044", "segm_mAP": 0.5874, "segm_mAP_50": 0.6827, "segm_mAP_75": 0.6452, "segm_mAP_s": 0.0574, "segm_mAP_m": 0.4403, "segm_mAP_l": 0.6699, "segm_mAP_copypaste": "0.5874 0.6827 0.6452 0.0574 0.4403 0.6699"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.00012, "bbox_mAP": 0.4315, "bbox_mAP_50": 0.6937, "bbox_mAP_75": 0.4625, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.3133, "bbox_mAP_l": 0.5085, "bbox_mAP_copypaste": "0.4315 0.6937 0.4625 0.1515 0.3133 0.5085", "segm_mAP": 0.5946, "segm_mAP_50": 0.6912, "segm_mAP_75": 0.6538, "segm_mAP_s": 0.0443, "segm_mAP_m": 0.4485, "segm_mAP_l": 0.678, "segm_mAP_copypaste": "0.5946 0.6912 0.6538 0.0443 0.4485 0.6780"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.4415, "bbox_mAP_50": 0.6943, "bbox_mAP_75": 0.4803, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.3124, "bbox_mAP_l": 0.5209, "bbox_mAP_copypaste": "0.4415 0.6943 0.4803 0.1515 0.3124 0.5209", "segm_mAP": 0.5973, "segm_mAP_50": 0.6915, "segm_mAP_75": 0.6626, "segm_mAP_s": 0.0512, "segm_mAP_m": 0.4451, "segm_mAP_l": 0.6816, "segm_mAP_copypaste": "0.5973 0.6915 0.6626 0.0512 0.4451 0.6816"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.4569, "bbox_mAP_50": 0.7008, "bbox_mAP_75": 0.5151, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.3163, "bbox_mAP_l": 0.5426, "bbox_mAP_copypaste": "0.4569 0.7008 0.5151 0.1515 0.3163 0.5426", "segm_mAP": 0.6101, "segm_mAP_50": 0.6992, "segm_mAP_75": 0.6841, "segm_mAP_s": 0.0509, "segm_mAP_m": 0.4328, "segm_mAP_l": 0.699, "segm_mAP_copypaste": "0.6101 0.6992 0.6841 0.0509 0.4328 0.6990"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.4569, "bbox_mAP_50": 0.7009, "bbox_mAP_75": 0.5152, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.3163, "bbox_mAP_l": 0.5424, "bbox_mAP_copypaste": "0.4569 0.7009 0.5152 0.1515 0.3163 0.5424", "segm_mAP": 0.6106, "segm_mAP_50": 0.6993, "segm_mAP_75": 0.6841, "segm_mAP_s": 0.0512, "segm_mAP_m": 0.433, "segm_mAP_l": 0.6989, "segm_mAP_copypaste": "0.6106 0.6993 0.6841 0.0512 0.4330 0.6989"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.4568, "bbox_mAP_50": 0.7007, "bbox_mAP_75": 0.515, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.3129, "bbox_mAP_l": 0.5423, "bbox_mAP_copypaste": "0.4568 0.7007 0.5150 0.1515 0.3129 0.5423", "segm_mAP": 0.6105, "segm_mAP_50": 0.6991, "segm_mAP_75": 0.6839, "segm_mAP_s": 0.0511, "segm_mAP_m": 0.4284, "segm_mAP_l": 0.6988, "segm_mAP_copypaste": "0.6105 0.6991 0.6839 0.0511 0.4284 0.6988"}
